generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserType {
  LOCAL
  GOOGLE
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model User {
  id                      String        @id @default(cuid())
  name                    String       
  display_name            String        @unique
  email                   String        @unique
  password                String?       
  image                   String        @default("/default.jpg")
  type                    UserType      
  createdAt               DateTime      @default(now())
  updatedAt               DateTime      @updatedAt
  sentFriendRequests      FriendRequest[] @relation("Sender")
  receivedFriendRequests  FriendRequest[] @relation("Receiver")
  sentMessages            Message[]     @relation("SentMessages")
  receivedMessages        Message[]     @relation("ReceivedMessages")
  friends                 Friend[]      @relation("UserFriends")
  friendsOf               Friend[]      @relation("FriendOfUser")
  SocketConnection        SocketConnection[]
}

model FriendRequest {
  id         String             @id @default(cuid())
  senderId   String
  receiverId String
  status     FriendRequestStatus
  createdAt  DateTime           @default(now())
  updatedAt  DateTime           @updatedAt
  sender     User               @relation("Sender", fields: [senderId], references: [id])
  receiver   User               @relation("Receiver", fields: [receiverId], references: [id])
  @@unique([senderId, receiverId])
}

model Friend {
  id        String   @id @default(cuid())
  userId    String
  friendId  String
  friendAt  DateTime @default(now())
  user      User     @relation("UserFriends", fields: [userId], references: [id])
  friend    User     @relation("FriendOfUser", fields: [friendId], references: [id])
  @@unique([userId, friendId])
}

model Message {
  id           String   @id @default(cuid())
  content      String
  senderId     String
  recipientId  String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  sender       User     @relation("SentMessages", fields: [senderId], references: [id])
  recipient    User     @relation("ReceivedMessages", fields: [recipientId], references: [id])
}

model SocketConnection {
  id        String   @id @default(cuid())
  userId    String
  socketId  String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}
